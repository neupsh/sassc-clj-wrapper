(ns sassc-clj-wrapper.sassc
    (:require [clojure.java.shell :as shell]
              [clojure.string :as string]
              [me.raynes.fs :as fs]))
  
(defn- create-config [node]
  (let [default {:src         "resources/scss/style.scss"
                  :output-to   "resources/public/css/style.css"
                  :style       "nested"
                  :import-path "resources/scss"}]
    (merge default node)))

(defn parse-import-path
  "Create the import path options for sassc, adding multiple options if the argument is a vector"
  [import-path]
  (let [import-path (if (vector? import-path) import-path [import-path])]
    (apply str (interleave (repeat " -I ") import-path))))

(defn- run-sassc-command
  "Run sassc command, compile a SASS/SCSS file."
  [config]
  (let [{:keys [src output-to style import-path]} config
        import-path (parse-import-path import-path)
        command (str "sassc -t " style import-path " " src " " output-to)]
    (println command)
    (apply shell/sh (string/split command #"\s+"))))

(defn- compile-node [node]
  (let [config (create-config node)]
    (-> (:output-to config)
        (fs/parent)
        (fs/mkdirs))
    (run-sassc-command config)))

(defn- once
  "Compile the sass files once."
  [config]
  (println "Compile SASS/SCSS files.")
  (as-> (compile-node config) %
        (case (:exit %)
          0 (println (:out %))
          (println (:err %)))))

(defn- clean
  "Remove automatically generated files."
  [config]
  (println "Deleting files generated by sassc.")
  (fs/delete (:output-to config)))


(defn sassc
  "Run the sassc with the given configuration"
  ([] (sassc :once))
  ([arg] (case (keyword arg)
          :once  (once {})
          :clean (clean {})
          (str "Invalid argument:" \" arg \"))))
  
  
(defn -main [& args]
  (println "Recompiling sass file...")
  ;(do (sassc :clean))
  (sassc :once))
